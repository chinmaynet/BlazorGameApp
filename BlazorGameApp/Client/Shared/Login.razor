@* @page "/login"  *@
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProviders
@inject IAuthService AuthService
@inject IToastService ToastService

@* @if (isAuthenticated)
{
    <div>
        <h1>Welcome, @user.UserName</h1>
    </div>    
} *@
@* else{ *@
<h6>Please Login in below or <a href="register">Register</a> For new Account</h6>

<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="form-group">
        <label for="email">User Name</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label for="userpassword">User Password</label>
        <InputText id="userpassword" @bind-Value="user.Password" type="password" class="form-control" autocomplete="current-password"></InputText>
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
    <ValidationSummary></ValidationSummary>
</EditForm>
@* } *@
@code {
    // bool isAuthenticated = false;
    private UserLogin user = new UserLogin();

    private async void HandleLogin()
    {   
        var result = await AuthService.Login(user);
        if (result.Success)
        {   

            await LocalStorage.SetItemAsync<string>("authToken", result.Data);
            await AuthenticationStateProviders.GetAuthenticationStateAsync();

            ToastService.ShowSuccess(result.Message);
        }
        else
        {
            ToastService.ShowError(result.Message);
        }


        // isAuthenticated = true;
        // Console.WriteLine($"{user.UserName} //{user.Password}");
       
    }
}
